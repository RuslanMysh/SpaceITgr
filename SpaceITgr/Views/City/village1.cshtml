@using SpaceITgr.Models;
@model SpaceITgr.Views.City.VillageModel
@{
    ViewBag.LoactionName = SpaceData.Locations["v1"].Name;
    ViewBag.LoactionPopulation = SpaceData.Locations["v1"].Population;
    ViewBag.CurrentTime = SpaceData.Planets[173].CurrentTime.ToString();
    Layout = "/Views/Shared/_LayoutCity.cshtml";
}
<head>
    <style>
        #bg {
            background-image: url("/Images/village1.png");
            background-repeat: no-repeat;
            background-size: 100%;

        }

        .overlay-image {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-65%, 17.5%);
            max-width: 600px;
            width: 100%;
            height: auto/* регулируйте размер */
        }

    </style>
</head>

<body id="bg">
    <img class="overlay-image" src="/Images/Oldman.png" />
</body>
<script src="https://unpkg.com/konva@8.3.2/konva.min.js"></script>
<script>
    const sceneWidth = 2560;
    const sceneHeight = 1400;

    const stage = new Konva.Stage({
        container: 'konva-container',
        width: sceneWidth,
        height: sceneHeight, // Достаточно для кнопки
    });

    const mainLayer = new Konva.Layer();

    const ButtonPlanets = new Konva.Rect({
        x: 1020, // Адаптивная позиция
        y: 100,
        width: 500,
        height: 80,
        stroke: 'gray',
        strokeWidth: 2,
        fill: 'white',
        cornerRadius: 5,
        shadowColor: '#595959',
        shadowBlur: 20,
        shadowOpacity: 0.1
    });

    const TextBtn = new Konva.Text({
        x: 1020,
        y: 100,
        width: 500,
        text: 'ВЗЯТЬ КВЕСТ',
        fontSize: 70,
        fontFamily: 'Courier',
        fill: 'gray',
        padding: 5,
        align: 'center'
    });

    const ButtonGroup = new Konva.Group();
    ButtonGroup.add(ButtonPlanets);
    ButtonGroup.add(TextBtn);
    mainLayer.add(ButtonGroup);
    stage.add(mainLayer);
    

    ButtonGroup.on("click", async () => {
            alert("Я старшина этой деревни. Здесь ещё относительно спокойно, в отличии от города.");
            alert("Я изучаю историю Системной Империи Андромеда, которая нас присоединила к себе.");
            alert("Парень, если ты плланируешь хотя бы выйти из нашей системы, то тебе стоит нам помочь.");
            alert("Слушай, на Марсе находится их ферма по выращиванию грока. Укради несколько, это поможет для исследования их культуры.");
            alert("Вот тебе кодовые данные о Марсе, теперь ты можешь отправлятся. Ещё возьми слепок ключа от подвала фермы. Пусть Маск сбережёт тебя.");


            



            const responseInvent = await fetch("/Player/AddItemToInventory", {
                method: "POST",
                headers: {"Content-Type": "application/json" },
                body: JSON.stringify({
                    Name: "Слепок ключа от подвала.",
                    Count: 1,
                    Mass: 1
                })
            });
            const responseQuest = await fetch("/Player/AddQuest", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    Name: "Спасибо Маску За Грок!",
                    Description: "Старшина деревни сказал вам отправлятся на Марс. На данной планете находится ферма грока. Вам нужно выкрасть несколько штук.",
                    DateOfAppointment: "@ViewBag.CurrentTime"
                })
            });

        const responseStudy = await fetch("/Player/ChangePlanet", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify
                ({
                    CodeName: "Planet175",
                    StudiedByPlayer: true
                })
            });
            const resultInvent = await responseInvent.json();
                if (responseInvent.ok) {
            alert(resultInvent.message);
                    // Закрываем старое модальное окно и открываем обновлённое
                    const oldModal = document.getElementById('inventory-modal');
                    if (oldModal) oldModal.remove();
                    ButtonInventoryGroup.fire('click'); // Программно кликаем по кнопке инвентаря
                }

            
            const resultQuest = await responseQuest.json();
                if (responseQuest.ok) {
                    alert(resultQuest.message);
                    // Закрываем старое модальное окно и открываем обновлённое
                    const oldModal = document.getElementById('quest-modal');
                    if (oldModal) oldModal.remove();
                    ButtonQuestsGroup.fire('click'); // Программно кликаем по кнопке инвентаря
                }

            

            const resultStudy = await responseStudy.json();
            if (responseStudy.ok) {
                alert("планета изменена");
                // Закрываем старое модальное окно и открываем обновлённое
                const oldModal = document.getElementById('planet-modal');
                if (oldModal) oldModal.remove();
                ButtonGroup.fire('click'); // Программно кликаем по кнопке инвентаря
            }

    });
    cursor(ButtonGroup);
    mainLayer.draw();
    const kc = document.getElementById('konva-container');
    function fitStageIntoParentContainer() {
        // Make the container take up the full width
        
        kc.style.width = '100%';

        // Get current container width
        const containerWidth = kc.offsetWidth;

        // Calculate scale based on virtual width vs actual width
        const scale = containerWidth / sceneWidth;

        // Set stage dimensions and scale
        stage.width(sceneWidth * scale);
        stage.height(sceneHeight * scale);
        stage.scale({ x: scale, y: scale });
    }

    // Initial fit
    fitStageIntoParentContainer();

    // Adapt the stage on window resize
    window.addEventListener('resize', fitStageIntoParentContainer);

    function cursor(group) {
        if (group instanceof Konva.Group) {
            console.log("Это Konva.Group!");
            group.on('mouseover', function (e) {
                e.target.getStage().container().style.cursor = 'pointer';
            });
            group.on('mouseout', function (e) {
                e.target.getStage().container().style.cursor = 'default';
            });
        }
        else {
            console.error("Передан не Konva.Group!");
        }
    }
</script>