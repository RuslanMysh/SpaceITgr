@using SpaceITgr.Models;
@model SpaceITgr.Views.Shared.PlayerButtonsModel
@{

}
<script src="https://unpkg.com/konva@8.3.2/konva.min.js"></script>
<script>


    //часы

    (function () {
        //localStorage.clear();



        // 1. Пытаемся загрузить сохранённое время из localStorage
        const savedTime = localStorage.getItem('planetTime');

        // 2. Если есть сохранённое время - используем его, иначе берём ViewBag.CurrentTime
        const initialTime = savedTime
            ? new Date(savedTime)
            : new Date("@Html.Raw(ViewBag.CurrentTime)");

        // 3. Запоминаем, когда страница загрузилась (для расчёта прошедшего времени)
        const pageLoadTime = new Date();

        function updateClock() {
            // 4. Вычисляем текущее время на планете:
            //    начальное время + разница между текущим моментом и загрузкой страницы
            const now = new Date();
            const timePassed = now - pageLoadTime;
            const planetTime = new Date(initialTime.getTime() + timePassed);

            // 5. Сохраняем текущее время в localStorage
            localStorage.setItem('planetTime', planetTime.toISOString());

            // 6. Форматируем и выводим время
            const options = {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            };

            document.getElementById('liveDateTime').textContent =
                planetTime.toLocaleDateString('ru-RU', options);
        }

        // 7. Запускаем обновление каждую секунду
        setInterval(updateClock, 1000);
        updateClock(); // Первый запуск
    })();


    //конва
    const sceneWidth = 2560;
    const sceneHeight = 2300;


    const kc = document.getElementById('konva-container');
    const stage = new Konva.Stage({
        container: kc,
        width: sceneWidth,
        height: sceneHeight,
    });

    


    const mainLayer = new Konva.Layer();

    //курсор городов
    function cursorCity(city) {
        if (city instanceof Konva.Circle) {
            console.log("Это Konva.Circle!");
            city.on('mouseover', function (e) {
                e.target.getStage().container().style.cursor = 'pointer';
            });
            city.on('mouseout', function (e) {
                e.target.getStage().container().style.cursor = 'default';
            });
        }
        else {
            console.error("Передан не Konva.Circle!");
        }
    }




    //город
    const City = new Konva.Circle({
        x: @ViewBag.CityTransform['x'],
        y: @ViewBag.CityTransform['y'],
        radius: @ViewBag.CityTransform['r'],
        fill: '#black',
        stroke: 'white',
        strokeWidth: 2,
        shadowColor: '@ViewBag.PlanetColor',
        shadowBlur: 25,
        shadowOpacity: 1
    })
    
    mainLayer.add(City);
    City.on("click", c => {
        const cityURL = '/Locality/@ViewBag.CityRoute';
        console.log(`Переход на страницу планеты: ${cityURL}`);
        window.location.href = cityURL;
    })
    cursorCity(City);
    //деревня
    const Village = new Konva.Circle({
        x: @ViewBag.VillageTransform['x'],
        y: @ViewBag.VillageTransform['y'],
        radius: @ViewBag.VillageTransform['r'],
        fill: '#black',
        stroke: 'white',
        strokeWidth: 2,
        shadowColor: '@ViewBag.PlanetColor',
        shadowBlur: 25,
        shadowOpacity: 1
    })
    cursorCity(Village);

    
    Village.on("click", c =>
    {
        const villURL = '/Locality/@ViewBag.VillageRoute';
        console.log(`Переход на страницу планеты: ${villURL}`);
        window.location.href = villURL;
    })
    mainLayer.add(Village);

    //поверхность
    const Surfce = new Konva.Circle({
        x: @ViewBag.SurfceTransform['x'],
        y: @ViewBag.SurfceTransform['y'],
        radius: @ViewBag.SurfceTransform['r'],
        fill: 'black',
        stroke: 'white',
        strokeWidth: 2,
        shadowColor: '@ViewBag.PlanetColor',
        shadowBlur: 25,
        shadowOpacity: 1
    });
    

    mainLayer.add(Surfce);
    Surfce.on("click", c => {
        const surURL = '/Locality/@ViewBag.SurfaceRoute';
        console.log(`Переход на страницу планеты: ${surURL}`);
        window.location.href = surURL;
    });
    cursorCity(Surfce);
    
    // 2. Загружаем изображение Земли
    const imageObj = new Image();
    imageObj.onload = function () {
        const planetImage = new Konva.Image({
            x: 1,
            y: 500,
            image: imageObj,
            width: 2560,
            height: 1696,
            shadowColor: '@ViewBag.PlanetColor',
            shadowBlur: 25,
            shadowOpacity: 1
        });

        mainLayer.add(planetImage);

        // 3. Добавляем кнопки (они будут поверх изображения и круга)
        mainLayer.add(ButtonGroup);
        mainLayer.add(ButtonQuestsGroup);
        mainLayer.add(ButtonInventoryGroup);

        City.zIndex(10);
        Village.zIndex(10);
        Surfce.zIndex(10);
        stage.add(mainLayer);

        // 4. Отрисовываем слой
        mainLayer.draw();
    };
    imageObj.src = "@ViewBag.URL";
 
    //курсор кнопок
    function cursor(group) {
        if (group instanceof Konva.Group) {
            console.log("Это Konva.Group!");
            group.on('mouseover', function (e) {
                e.target.getStage().container().style.cursor = 'pointer';
            });
            group.on('mouseout', function (e) {
                e.target.getStage().container().style.cursor = 'default';
            });
        }
        else {
            console.error("Передан не Konva.Group!");
        }
    }
    







    const ButtonPlanets = new Konva.Rect(
        {
            x: 1600,
            y: 120,
            width: 400,
            height: 100,
            stroke: 'white',
            strokeWidth: 2,
            fill: '#black',
            cornerRadius: 5,
            shadowColor: '#595959',
            shadowBlur: 20,
            shadowOpasity: 0.1

        });

    const TextBtn = new Konva.Text(
        {
            x: 1600,
            y: 120,
            width: 400,
            text: 'ПЛАНЕТЫ',
            fontSize: 85,
            fontFamily: 'Courier',
            fill: 'black',
            padding: 5,
            align: 'center',
            fill: 'white'
        });

    const ButtonGroup = new Konva.Group();
    ButtonGroup.add(ButtonPlanets);
    ButtonGroup.add(TextBtn);



    ButtonGroup.on('click', async (evt) => {
        evt.cancelBubble = true;

        try {
            // 1. Запрос данных
            const response = await fetch('/Player/PlayerPlanets');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

            // 2. Получение данных
            const planets = await response.json();
            console.log("Raw planets data:", planets); // Важно для отладки

            // 3. Удаление старого модального окна
            const oldModal = document.getElementById('planet-modal');
            if (oldModal) oldModal.remove();

            // 4. Создание модального окна
            const modal = document.createElement('div');
            modal.id = 'planet-modal';
            modal.style.cssText = `
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    border: 2px solid white;
                    transform: translate(-50%, -50%);
                    z-index: 1000;
                    width: 500px;
                    max-height: 100vh;
                    padding: 20px;
                    background: #020302;
                    border-radius: 10px;
                        box-shadow: 0 0 40px #595959;
                    overflow-y: auto;
                `;

            // 5. Заголовок
            const title = document.createElement('h2');
            title.textContent = 'Известные Вам объекты';
            title.style.cssText = `
                    font-family: 'Courier';
                    text-align: center;
                    margin-bottom: 20px;
                    color: white;
                    border-bottom: 1px solid white;
                    padding-bottom: 10px;
                `;
            modal.appendChild(title);

            // 6. Список планет
            const list = document.createElement('div');

            planets.forEach(p => {
                // Явное приведение типов и проверка
                const planet = {
                    id: p?.Id || p?.id || 0,
                    name: p?.Name || p?.name || 'Неизвестный объект',
                    type: p?.Type || p?.type || 'Unknown',
                    studied: Boolean(p?.Studied || p?.studied || false)
                };

                console.log("Processing planet:", planet); // Логируем каждую планету

                const item = document.createElement('div');
                item.style.cssText = `
                        font-size: 20px;
                        padding: 12px;
                        margin: 8px 0;
                        background: ${planet.studied ? '#010f00' : '#0f0000'};
                        border-radius: 6px;
                        cursor: pointer;
                        transition: all 0.3s;
                        border-left: 4px solid ${getTypeColor(planet.type)};
                    `;

                item.innerHTML = `
                         <div style="font-weight: bold; color: white; ">${planet.name} | ${planet.id}</div>
                            <div style="font-size: 18px; color: #b5b5b5;">
                            Тип: ${formatType(planet.type)}
                            ${planet.studied ? '✓ Исследована' : '✗ Не исследована'}
                        </div>
                    `;

                item.addEventListener('click', () => {
                    console.log('Выбрана планета:', planet);
                    if (planet.studied == true) {
                        const planetURL = `/${planet.name}`;
                        console.log(`Переход на страницу планеты: ${planetURL}`);
                        window.location.href = planetURL;
                    }
                    else {
                        alert("Объект не исследован");
                    }

                });

                list.appendChild(item);
            });

            modal.appendChild(list);
            document.body.appendChild(modal);

            // 7. Вспомогательные функции
            function getTypeColor(type) {
                const colors = {
                    'Earth_Type': 'white',
                    'Gas_Giants': '#121212',
                    'Dwarf_Planets': '#4d4b4b',
                    'Satellite': '#8c8c8c'
                };
                return colors[type] || '#95a5a6';
            }

            function formatType(type) {
                const names = {
                    'Earth_Type': 'Землеподобная',
                    'Gas_Giants': 'Газовый гигант',
                    'Dwarf_Planets': 'Карликовая планета',
                    'Satellite': 'Спутник'
                };
                return names[type] || type;
            }

            // 8. Закрытие при клике вне окна
            const closeModal = (e) => {
                if (!modal.contains(e.target)) {
                    modal.remove();
                    document.removeEventListener('click', closeModal);
                }
            };
            document.addEventListener('click', closeModal);

        } catch (error) {
            console.error('Ошибка:', error);
            alert('Ошибка при загрузке списка объектов: ' + error.message);
        }
    });
    
    cursor(ButtonGroup);

    //кнопка квестов



    const ButtonQuests = new Konva.Rect(
        {
            x: 400,
            y: 120,
            width: 400,
            height: 100,
            stroke: 'white',
            strokeWidth: 2,
            fill: '#black',
            cornerRadius: 5,
            shadowColor: '#595959',
            shadowBlur: 20,
            shadowOpasity: 0.1

        });

    const TextQuests = new Konva.Text(
        {
            x: 400,
            y: 120,
            width: 400,
            text: 'КВЕСТЫ',
            fontSize: 85,
            fontFamily: 'Courier',
            fill: 'black',
            padding: 5,
            align: 'center',
            fill: 'white'
        });

    const ButtonQuestsGroup = new Konva.Group();
    ButtonQuestsGroup.add(ButtonQuests);
    ButtonQuestsGroup.add(TextQuests);



    ButtonQuestsGroup.on('click', async (evt) => {
        evt.cancelBubble = true;

        try {
            // 1. Запрос данных
            const response = await fetch('/Player/PlayerQuests');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

            // 2. Получение данных
            const quests = await response.json();
            console.log("Raw planets data:", quests); // Важно для отладки

            // 3. Удаление старого модального окна
            const oldModal = document.getElementById('quest-modal');
            if (oldModal) oldModal.remove();

            // 4. Создание модального окна
            const modal = document.createElement('div');
            modal.id = 'quest-modal';
            modal.style.cssText = `
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        border: 2px solid white;
                        transform: translate(-50%, -50%);
                        z-index: 1000;
                        width: 500px;
                        max-height: 100vh;
                        padding: 20px;
                        background: #020302;
                        border-radius: 10px;
                            box-shadow: 0 0 40px #595959;
                        overflow-y: auto;
                    `;

            // 5. Заголовок
            const title = document.createElement('h2');
            title.textContent = 'Ваши квесты';
            title.style.cssText = `
                        font-family: 'Courier';
                        text-align: center;
                        margin-bottom: 20px;
                        color: white;
                        border-bottom: 1px solid white;
                        padding-bottom: 10px;
                    `;
            modal.appendChild(title);

            // 6. Список квестов
            const list = document.createElement('div');

            quests.forEach(q => {
                // Явное приведение типов и проверка
                const quest = {
                    id: q?.Id || q?.id || 0,
                    name: q?.Name || q?.name || 'Неизвестный квест',
                    type: q?.Type || q?.type || 'Unknown',
                    decs: q?.Desc || q?.desc || 'Неизвестно',
                    date: q?.Date || q?.date || '01.01.1970 00:00:01'
                };

                console.log("Processing quest:", quest); // Логируем каждый квест

                const item = document.createElement('div');
                item.style.cssText = `
                            font-size: 20px;
                            padding: 12px;
                            margin: 8px 0;
                            background: #171717;
                            border-radius: 6px;
                            cursor: pointer;
                            transition: all 0.3s;
                            border-left: 4px solid ${getTypeColor(quest.type)};
                        `;

                item.innerHTML = `
                            <div style="font-weight: bold; color: white; ">${quest.name} | ${quest.date}</div>
                            <div style="font-size: 18px; color: #b5b5b5;">
                             Тип: ${formatType(quest.type)}
                            </div>
                        `;

                item.addEventListener('click', () => {
                    alert(quest.decs);
                });

                list.appendChild(item);
            });

            modal.appendChild(list);
            document.body.appendChild(modal);

            // 7. Вспомогательные функции
            function getTypeColor(type) {
                const colors = {
                    'Completed': '#454545',
                    'Current': '#ffffff',
                    'Failed': '#0d0d0d',
                };
                return colors[type] || '#95a5a6';
            }

            function formatType(type) {
                const names = {
                    'Completed': 'Выполнен',
                    'Current': 'Активный',
                    'Failed': 'Проваленный',
                };
                return names[type] || type;
            }

            // 8. Закрытие при клике вне окна
            const closeModal = (e) => {
                if (!modal.contains(e.target)) {
                    modal.remove();
                    document.removeEventListener('click', closeModal);
                }
            };
            document.addEventListener('click', closeModal);

        } catch (error) {
            console.error('Ошибка:', error);
            alert('Ошибка при загрузке списка объектов: ' + error.message);
        }
    });
    cursor(ButtonQuestsGroup);



    //кнопка инвентаря


    const ButtonInventory = new Konva.Rect(
        {
            x: 1000,
            y: 120,
            width: 400,
            height: 100,
            stroke: 'white',
            strokeWidth: 2,
            fill: '#black',
            cornerRadius: 5,
            shadowColor: '#595959',
            shadowBlur: 20,
            shadowOpasity: 0.1

        });

    const TextInventory = new Konva.Text(
        {
            x: 1000,
            y: 120,
            width: 400,
            text: 'РЮКЗАК',
            fontSize: 85,
            fontFamily: 'Courier',
            fill: 'black',
            padding: 5,
            align: 'center',
            fill: 'white'
        });

    const ButtonInventoryGroup = new Konva.Group();
    ButtonInventoryGroup.add(ButtonInventory);
    ButtonInventoryGroup.add(TextInventory);



    ButtonInventoryGroup.on('click', async (evt) => {
        evt.cancelBubble = true;

        try {
            // 1. Запрос данных
            const response = await fetch('/Player/PlayerInventory');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

            // 2. Получение данных
            const items = await response.json();
            console.log("Raw planets data:", items); // Важно для отладки

            // 3. Удаление старого модального окна
            const oldModal = document.getElementById('inventory-modal');
            if (oldModal) oldModal.remove();

            // 4. Создание модального окна
            const modal = document.createElement('div');
            modal.id = 'inventory-modal';
            modal.style.cssText = `
                            position: fixed;
                            top: 50%;
                            left: 50%;
                            border: 2px solid white;
                            transform: translate(-50%, -50%);
                            z-index: 1000;
                            width: 500px;
                            max-height: 100vh;
                            padding: 20px;
                            background: #020302;
                            border-radius: 10px;
                                box-shadow: 0 0 40px #595959;
                            overflow-y: auto;
                        `;

            // 5. Заголовок
            const title = document.createElement('h2');
            title.textContent = 'Ваш рюкзак';
            title.style.cssText = `
                            font-family: 'Courier';
                            text-align: center;
                            margin-bottom: 20px;
                            color: white;
                            border-bottom: 1px solid white;
                            padding-bottom: 10px;
                        `;
            modal.appendChild(title);

            // 6. Список квестов
            const list = document.createElement('div');

            items.forEach(i => {
                // Явное приведение типов и проверка
                const invent = {
                    name: i?.Name || i?.name ,
                    mass: i?.Mass || i?.mass ,
                    count: i?.Count || i?.count ,
                };

                console.log("Processing invetory:", invent); // Логируем каждый квест

                const item = document.createElement('div');
                item.style.cssText = `
                                font-size: 20px;
                                padding: 12px;
                                margin: 8px 0;
                                background: #171717;
                                border-radius: 6px;
                                cursor: pointer;
                                transition: all 0.3s;
                            `;

                item.innerHTML = `
                                        <div style="font-weight: bold; color: white; ">${invent.name}|${invent.mass}kg</div>
                                <div style="font-size: 18px; color: #b5b5b5;">
                                     Кол-во: ${invent.count}
                                </div>
                            `;

                item.addEventListener('click', () => {
                    alert(`предмет ${invent.name}`);
                });

                list.appendChild(item);
            });

            modal.appendChild(list);
            document.body.appendChild(modal);

            // 8. Закрытие при клике вне окна
            const closeModal = (e) => {
                if (!modal.contains(e.target)) {
                    modal.remove();
                    document.removeEventListener('click', closeModal);
                }
            };
            document.addEventListener('click', closeModal);

        } catch (error) {
            console.error('Ошибка:', error);
            alert('Ошибка при загрузке списка объектов: ' + error.message);
        }
    });
    cursor(ButtonInventoryGroup);


    mainLayer.draw();



    function fitStageIntoParentContainer() {
        // Make the container take up the full width
        kc.style.width = '100%';

        // Get current container width
        const containerWidth = kc.offsetWidth;

        // Calculate scale based on virtual width vs actual width
        const scale = containerWidth / sceneWidth;

        // Set stage dimensions and scale
        stage.width(sceneWidth * scale);
        stage.height(sceneHeight * scale);
        stage.scale({ x: scale, y: scale });
    }

    // Initial fit
    fitStageIntoParentContainer();

    // Adapt the stage on window resize
    window.addEventListener('resize', fitStageIntoParentContainer);

</script>
